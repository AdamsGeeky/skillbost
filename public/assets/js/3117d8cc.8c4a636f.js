"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[1331],{8045:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=i(5893),a=i(1151);const s={sidebar_position:5},r="JavaScript Learning Objectives",o={id:"frontend/js",title:"JavaScript Learning Objectives",description:"1. Introduction to JavaScript:",source:"@site/docs/frontend/js.mdx",sourceDirName:"frontend",slug:"/frontend/js",permalink:"/docs/frontend/js",draft:!1,unlisted:!1,editUrl:"https://github.com/GDSC-GSU/docs/frontend/js.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"CSS Learning Objectives",permalink:"/docs/frontend/css"},next:{title:"Backend as Service",permalink:"/docs/category/backend-as-service"}},c={},l=[{value:"1. Introduction to JavaScript:",id:"1-introduction-to-javascript",level:2},{value:"2. Variables and Data Types in JavaScript:",id:"2-variables-and-data-types-in-javascript",level:2},{value:"3. Control Flow and Conditional Statements:",id:"3-control-flow-and-conditional-statements",level:2},{value:"4. Loops and Iteration:",id:"4-loops-and-iteration",level:2},{value:"5. Functions in JavaScript:",id:"5-functions-in-javascript",level:2},{value:"6. JavaScript Arrays and Objects:",id:"6-javascript-arrays-and-objects",level:2},{value:"7. Document Object Model (DOM) Manipulation:",id:"7-document-object-model-dom-manipulation",level:2},{value:"8. Events and Event Handling:",id:"8-events-and-event-handling",level:2},{value:"9. Asynchronous JavaScript:",id:"9-asynchronous-javascript",level:2},{value:"10. Introduction to APIs (Application Programming Interfaces):",id:"10-introduction-to-apis-application-programming-interfaces",level:2},{value:"11. JavaScript Best Practices:",id:"11-javascript-best-practices",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,a.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"javascript-learning-objectives",children:"JavaScript Learning Objectives"}),"\n",(0,t.jsx)(e.h2,{id:"1-introduction-to-javascript",children:"1. Introduction to JavaScript:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Understand the role of JavaScript in web development."}),"\n",(0,t.jsx)(e.li,{children:"Learn how to include JavaScript in HTML documents."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"2-variables-and-data-types-in-javascript",children:"2. Variables and Data Types in JavaScript:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Explore the concept of variables and their role in storing data."}),"\n",(0,t.jsx)(e.li,{children:"Understand different data types such as strings, numbers, booleans, and objects."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"3-control-flow-and-conditional-statements",children:"3. Control Flow and Conditional Statements:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Learn about control flow in JavaScript using conditional statements like ",(0,t.jsx)(e.code,{children:"if"}),", ",(0,t.jsx)(e.code,{children:"else if"}),", and ",(0,t.jsx)(e.code,{children:"else"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:["Understand the ",(0,t.jsx)(e.code,{children:"switch"})," statement for handling multiple conditions."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"4-loops-and-iteration",children:"4. Loops and Iteration:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Explore different types of loops in JavaScript, including ",(0,t.jsx)(e.code,{children:"for"}),", ",(0,t.jsx)(e.code,{children:"while"}),", and ",(0,t.jsx)(e.code,{children:"do-while"}),"."]}),"\n",(0,t.jsx)(e.li,{children:"Understand how loops can be used for repetitive tasks."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"5-functions-in-javascript",children:"5. Functions in JavaScript:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Master the concept of functions and their role in code organization."}),"\n",(0,t.jsx)(e.li,{children:"Learn to create and call functions with and without parameters."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"6-javascript-arrays-and-objects",children:"6. JavaScript Arrays and Objects:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Understand arrays and how they store collections of data."}),"\n",(0,t.jsx)(e.li,{children:"Explore objects and their key-value pairs for more complex data structures."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"7-document-object-model-dom-manipulation",children:"7. Document Object Model (DOM) Manipulation:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Learn how JavaScript interacts with the DOM to dynamically change HTML and CSS."}),"\n",(0,t.jsx)(e.li,{children:"Explore methods for selecting, modifying, and creating HTML elements."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"8-events-and-event-handling",children:"8. Events and Event Handling:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Understand how events work in the browser and how to handle them with JavaScript."}),"\n",(0,t.jsx)(e.li,{children:"Learn to respond to user interactions such as clicks, keypresses, and form submissions."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"9-asynchronous-javascript",children:"9. Asynchronous JavaScript:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Explore asynchronous programming with concepts like callbacks, Promises, and async/await."}),"\n",(0,t.jsx)(e.li,{children:"Understand how asynchronous operations impact the flow of your code."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"10-introduction-to-apis-application-programming-interfaces",children:"10. Introduction to APIs (Application Programming Interfaces):"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Learn how to fetch data from external APIs using JavaScript."}),"\n",(0,t.jsx)(e.li,{children:"Understand the basics of making HTTP requests and handling responses."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"11-javascript-best-practices",children:"11. JavaScript Best Practices:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Explore best practices for writing clean, efficient, and maintainable JavaScript code."}),"\n",(0,t.jsx)(e.li,{children:"Understand concepts like code organization, error handling, and debugging."}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"As you progress through these JavaScript learning objectives, you'll gain the skills to create dynamic and interactive web applications."})]})}function h(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},1151:(n,e,i)=>{i.d(e,{Z:()=>o,a:()=>r});var t=i(7294);const a={},s=t.createContext(a);function r(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);